library(
    identifier: 'pipeline-lib@1.2.1',
    retriever: modernSCM([$class: 'GitSCMSource',
                          remote: 'https://github.com/SmartColumbusOS/pipeline-lib',
                          credentialsId: 'jenkins-github-user'])
)

def image
def currentTagIsReadyForProduction = scos.isRelease(env.BRANCH_NAME)
def currentTagIsReadyForStaging = env.BRANCH_NAME == "master"
def doStageIf = scos.&doStageIf

node ('master') {
    ansiColor('xterm') {
        stage('Checkout') {
            deleteDir()
            env.GIT_COMMIT_HASH = checkout(scm).GIT_COMMIT

            scos.addGitHubRemoteForTagging("SmartColumbusOS/cota-streaming-consumer.git")
        }

        doStageIf(!currentTagIsReadyForProduction, 'Build') {
            image = docker.build("scos/cota-streaming-consumer:${env.GIT_COMMIT_HASH}")
        }

        doStageIf(!currentTagIsReadyForProduction, 'Deploy to Dev') {
            scos.withDockerRegistry {
                image.push()
                image.push('latest')
            }
            deployConsumer('dev')
        }

        doStageIf(currentTagIsReadyForStaging, 'Deploy to Staging')  {
            def promotionTag = scos.releaseCandidateNumber()

            deployConsumer('staging')

            scos.applyAndPushGitHubTag(promotionTag)

            scos.withDockerRegistry {
                image.push(promotionTag)
            }
        }

        doStageIf(currentTagIsReadyForProduction, 'Deploy to Production') {
            def releaseTag = env.BRANCH_NAME
            def promotionTag = 'prod'

            deployConsumer('prod')

            scos.applyAndPushGitHubTag(promotionTag)

            scos.withDockerRegistry {
                image = scos.pullImageFromDockerRegistry("scos/cota-streaming-consumer", env.GIT_COMMIT_HASH)
                image.push(releaseTag)
                image.push(promotionTag)
            }
        }
    }
}

def deployConsumer(environment) {
    scos.withEksCredentials(environment) {
        def terraformOutputs = scos.terraformOutput(environment)
        def subnets = terraformOutputs.public_subnets.value.join(', ')
        def allowInboundTrafficSG = terraformOutputs.allow_all_security_group.value

        sh("""#!/bin/bash
            set -e
            export VERSION="${env.GIT_COMMIT_HASH}"
            export DNS_ZONE="${environment}.internal.smartcolumbusos.com"
            export SUBNETS="${subnets}"
            export SECURITY_GROUPS="${allowInboundTrafficSG}"

            for manifest in k8s/*; do
                cat \$manifest | envsubst | kubectl apply -f -
            done
        """.trim())
    }
}
